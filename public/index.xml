<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>codeangel</title><link>https://codeangel.tech/</link><description>Recent content on codeangel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 Sep 2024 13:50:00 +0000</lastBuildDate><atom:link href="https://codeangel.tech/index.xml" rel="self" type="application/rss+xml"/><item><title>CodeAngel</title><link>https://codeangel.tech/projects/codeangel/</link><pubDate>Sun, 29 Sep 2024 13:50:00 +0000</pubDate><guid>https://codeangel.tech/projects/codeangel/</guid><description>CodeAngel: A Personal Portfolio</description></item><item><title>gdocp</title><link>https://codeangel.tech/projects/gdocp/</link><pubDate>Sun, 29 Sep 2024 13:50:00 +0000</pubDate><guid>https://codeangel.tech/projects/gdocp/</guid><description>gdocp: Developer&amp;rsquo;s Companion for DSA Notes</description></item><item><title>Pet Connect</title><link>https://codeangel.tech/projects/pet-connect/</link><pubDate>Sun, 29 Sep 2024 13:50:00 +0000</pubDate><guid>https://codeangel.tech/projects/pet-connect/</guid><description>Pet Connect: Adoption and Support for Pets</description></item><item><title>Pong-Mania</title><link>https://codeangel.tech/projects/pong-mania/</link><pubDate>Sun, 29 Sep 2024 13:50:00 +0000</pubDate><guid>https://codeangel.tech/projects/pong-mania/</guid><description>Pong-Mania: A Realtime Multiplayer Classic In 2024, I embarked on an exciting journey to recreate the classic Pong game, but with a modern twist: real-time multiplayer. Pong-Mania leverages modern technologies like Golang, HTMX, and WebSockets to deliver a seamless multiplayer experience where players from around the world can compete against each other in real time.
The Challenge The idea behind Pong-Mania was not just to create a simple Pong game but to build a scalable, responsive multiplayer version where the game state is synchronized in real time across multiple players.</description></item><item><title>React Popular Repos</title><link>https://codeangel.tech/projects/react-popular-repos/</link><pubDate>Sun, 29 Sep 2024 13:50:00 +0000</pubDate><guid>https://codeangel.tech/projects/react-popular-repos/</guid><description>React Popular Repos: A Repository Showcase</description></item><item><title>Leetcod 217: Contains Duplicate</title><link>https://codeangel.tech/notes/leetcode-217-contains-duplicate/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://codeangel.tech/notes/leetcode-217-contains-duplicate/</guid><description>Problem LeetCode 217 - Contains Duplicate
Solution Use a hash map to keep track of seen numbers. Iterate through the array once, checking if each number is already in the map. If it is, return true (duplicate found). If not, add the number to the map. If we finish iterating without finding a duplicate, return false.
Analysis Time Complexity: O(n) Space Complexity: O(n)
Code package arrayshashing func ContainsDuplicate(nums []int) bool { result := make(map[int]bool) for _, v := range nums { if _, exists := result[v]; exists { return true } result[v] = true } return false }</description></item><item><title>Leetcode 242: Valid Anagram</title><link>https://codeangel.tech/notes/leetcode-242-valid-anagram/</link><pubDate>Sun, 29 Sep 2024 00:00:00 +0000</pubDate><guid>https://codeangel.tech/notes/leetcode-242-valid-anagram/</guid><description>Problem LeetCode 242 - Valid Anagram
Solution Use two hash maps to count the frequency of characters in each string. First, check if the lengths of the strings are equal. If not, return false. Then, iterate through both strings simultaneously, updating the character counts in their respective maps. Finally, compare the two maps. If they are identical, the strings are anagrams.
Analysis Time Complexity: O(n), where n is the length of the strings Space Complexity: O(k), where k is the size of the character set (constant if considering only lowercase English letters)</description></item></channel></rss>